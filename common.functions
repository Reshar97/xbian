##
##      Copyright (C) 2012 - 2014 XBian
##
##  Find us at: http://www.xbian.org http://github.com/xbianonpi/xbian
##
##  This Program is free software; you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation; either version 2, or (at your option)
##  any later version.
##
##  This Program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with XBMC; see the file COPYING.  If not, see
##  <http://www.gnu.org/licenses/>.
##
##

do_exit()
{
    set +e
    [ -n "$2" ] && result=$2
    echo "$1 error $result"
    exit $result
}

rexp()
{
    set +e
    [ ! -e "$1" ] && return

    while read line; do
        echo $line | grep -q '^[a-zA-Z]' || continue
        vaname=$(echo "$line" | awk -F'=' '{print $1}')
        vavalue=${line#*=}
        case $vaname in
            config_*)
                export "$line"
                ;;
            *)
                eval "export $vaname=\"\$$vaname $vavalue\""
                ;;
        esac
    done < "$1"
}

print_log() # level, message, ...
{
    set +e
    LEVEL=$1
    shift 1

    case $LEVEL in
        (eme*)
            test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.emerge "$*"
            echo Emergency: "$*" 1>&2
            ;;
        (ale*)
            test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.alert "$*"
            echo Alert: "$*" 1>&2
            ;;
        (cri*)
            test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.crit "$*"
            echo Critical: "$*" 1>&2
            ;;
        (err*)
            test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.err "$*"
            echo Error: "$*" 1>&2
            ;;
        (war*)
            test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.warning "$*"
            test -z "$opt_quiet" && echo Warning: "$*" 1>&2
            WARNING_COUNT=$(( $WARNING_COUNT + 1 ))
            ;;
        (not*)
            test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.notice "$*"
            test -z "$opt_quiet" && echo "$*"
            ;;
        (inf*)
            # test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.info "$*"
            test -n "$opt_verbose" && echo "$*"
            ;;
        (deb*)
            # test -n "$opt_syslog" && logger -t "$opt_prefix" -p daemon.debug "$*"
            test -n "$opt_debug" && echo Debug: "$*"
            ;;
        (*)
            test -n "$opt_syslog" && logger -t "$opt_prefix" "$*"
            echo "$*" 1>&2
            ;;
    esac
}

do_run() # [argv]
{
    set +e
    if [ -n "$opt_dry_run" ]; then
        echo "... Running $*"
        RC="$?"
    else
        eval $*
        RC="$?"
        if [ "$RC" -eq '0' ]; then
            print_log debug "$*"
        else
            print_log warning "$* returned $RC"
        fi
    fi

    result=$((result + RC))
    return "$RC"
}

